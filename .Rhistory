effects <- paste("F(", anova_table$Df,") = ", round(anova_table$`F value`,2), " p = ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p == 0.000, "<0.001", output$p)
output <-output[1:(nrow(output)-1),]
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
# Function to create a text output for a chi2 model
report_chi <- function(chi_model){
if(chi_model$p.value < 0.001){
return(paste("X2 = ",round(chi_model$statistic,2), "; p<0.001", sep = ""))
} else {
return(paste( "X2 = ",round(chi_model$statistic,2), "; p = ", round(chi_model$p.value,3), sep = ""))
}
}
# Function to create a text output for a emmeans model
report_emmeans <- function(mod_emmeans){
post_hoc <- mod_emmeans
if(colnames(post_hoc)[5] == "t.ratio"){
output <- data.frame(post_hoc$contrast)
output$report <- paste("t(", post_hoc$df,") = ", round(post_hoc$t.ratio,2), "; p ", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ",round(post_hoc$p.value,3)))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else if(colnames(post_hoc[5]) == "z.ratio"){
output <- data.frame(post_hoc$contrast)
output$report <- paste("z = ", round(post_hoc$z.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ", round(post_hoc$p.value,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else{
print("Unknown format, only results from z and t distributions are available")
}
}
# Function to convert numbers to words --> 1 -> one
number_to_word <- function(number){
if(number == 0){
return("zero")
} else if(number == 1){
return("one")
}else if(number == 2){
return("two")
} else if(number == 3){
return("three")
} else if(number == 4){
return("four")
} else if(number == 5){
return("five")
} else if(number == 6){
return("six")
} else if(number == 7){
return("seven")
} else if(number == 8){
return("eight")
} else if(number == 9){
return("nine")
} else if(number == 10){
return("ten")
} else if(number > 10 | number < 0){
return(number)
}
}
# Function to create a text output for a glm model
report_glm <- function(glm_model){
sum_glm <- summary(glm_model)
sum_glm <- sum_glm$coefficients
names_eff <- rownames(sum_glm)
output <- data.frame(names_eff)
output$report <- paste("Z = ", round(sum_glm[,3],2), "; p ", ifelse(round(sum_glm[,4],3) < 0.001, "<0.001", paste("= ", round(sum_glm[,4],3), sep = "")), sep = "")
output <- output[-1,]
return(output)
}
# Function to prepare the data to be entered in the first Random Forest model
data_RF_outcome_single_tree <- function(data){
library(dplyr)
temp <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre, atcd.famille, std_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp <- temp%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
temp <- as.data.frame(temp)
for (i in 1:ncol(temp)){
temp[,i] <- factor(temp[,i])
}
data_RF <<- as.data.frame(temp)
# Division in training and test dataframes
train_index <- sample(nrow(temp), nrow(temp)*0.75)
data_RF_train <<- temp[train_index,]
data_RF_test <- temp[-train_index,]
data_RF_test <<- data_RF_test[,1:ncol(data_RF_test)-1]
labels_final <- temp[,ncol(temp)]
temp_labels_final <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,  atcd.famille, std_eeg, les.epi, status.neuro,  veille.sommeil, res.dx.final)
labels_final_train_RF <<- labels_final[train_index]
labels_final_test_RF <<- labels_final[-train_index]
labels_initial_train_RF <<- temp_labels_final[train_index,ncol(temp_labels_final)]
labels_initial_test_RF <<- temp_labels_final[-train_index,ncol(temp_labels_final)]
labels_initial_global <<- temp$res.dx.initial
}
# Function to prepare the data to be entered in the second and third Random Forest models
data_RF_outcome_single_tree_LT <- function(data){
library(dplyr)
temp <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(res.lt.EEG != "aucun")%>%
filter(res.lt.EEG != "aucun mais propose" & res.lt.EEG != "aucun mais  propose")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(lt_eeg = ifelse(res.lt.EEG == "normal", "normal", EEG.lt.result_resume),
lt_eeg = case_when(pointes.lt.EEG == "focale" ~ "focale",
pointes.lt.EEG == "diffuse"~ "diffuse",
pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" ~ lt_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,  atcd.famille, std_eeg, lt_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp <- temp%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
lt_eeg = ifelse(lt_eeg == "focale" | lt_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
temp <- as.data.frame(temp)
for (i in 1:ncol(temp)){
temp[,i] <- factor(temp[,i])
}
data_RF <<- as.data.frame(temp)
# Division in training and test dataframes
train_index <- sample(nrow(temp), nrow(temp)*0.75)
data_RF_train <<- temp[train_index,]
data_RF_test <- temp[-train_index,]
data_RF_test <<- data_RF_test[,1:ncol(data_RF_test)-1]
labels_final <- temp[,ncol(temp)]
temp_labels_final <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(res.lt.EEG != "aucun")%>%
filter(res.lt.EEG != "aucun mais propose" & res.lt.EEG != "aucun mais  propose")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(lt_eeg = ifelse(res.lt.EEG == "normal", "normal", EEG.lt.result_resume),
lt_eeg = case_when(pointes.lt.EEG == "focale" ~ "focale",
pointes.lt.EEG == "diffuse"~ "diffuse",
pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" ~ lt_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,atcd.famille, std_eeg, lt_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp_labels_final <- temp_labels_final%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
lt_eeg = ifelse(lt_eeg == "focale" | lt_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
labels_final_train_RF <<- labels_final[train_index]
labels_final_test_RF <<- labels_final[-train_index]
labels_initial_train_RF <<- temp_labels_final[train_index,ncol(temp_labels_final)]
labels_initial_test_RF <<- temp_labels_final[-train_index,ncol(temp_labels_final)]
labels_initial_global <<- temp$res.dx.initial
}
# Preparation of the data
data_RF_outcome_single_tree(data_full_cleaned)
# Random forest model
# Definition of the model
RF_model <- randomForest(res.dx.final ~ ., data = data_RF_train,
ntree = 2000)
# Estimation of the mean decrease gini
gini <- importance(RF_model)
gini <- data.frame(rownames(gini), gini)
gini$MeanDecreaseGini <- round(gini$MeanDecreaseGini,2)
gini <- arrange(gini,desc( MeanDecreaseGini))
gini
# Prediction, confusion matrix and accuracy
prediction <- predict(RF_model, newdata = data_RF_test, type = "class")
conf_mat <- table(prediction, labels_final_test_RF)
acc <- round(mean(labels_final_test_RF == prediction),4)*100
acc
# ROC curve
# Calculate the probability of new observations belonging to each class
# prediction_for_roc_curve will be a matrix with dimensions data_set_size x number_of_classes
prediction_for_roc_curve <- predict(RF_model,data_RF_test,type="prob")
# Use pretty colours:
pretty_colours <- c("#F8766D","#00BA38")
# Specify the different classes
classes <- levels(data_RF$res.dx.final)
# For each class
save_auc <- as.numeric()
for (i in 1:2){
# Define which observations belong to class[i]
true_values <- ifelse(labels_final_test_RF==classes[i],1,0)
# Assess the performance of classifier for class[i]
pred <- prediction(prediction_for_roc_curve[,i],true_values)
perf <- performance(pred, "tpr", "fpr")
if (i==1)
{
plot(perf,main="ROC Curve",col=pretty_colours[i])
}
else
{
plot(perf,main="ROC Curve",col=pretty_colours[i],add=TRUE)
}
# Calculate the AUC and print it to screen
auc.perf <- performance(pred, measure = "auc")
save_auc[i] <- auc.perf@y.values
}
legend(x = 0.8, y= 0.8, legend = classes, fill = pretty_colours, col = pretty_colours)
save_auc <- do.call(rbind, save_auc)
res_auc <- data.frame(classes, save_auc)
# Predictive ability of an MD in the ER
data_MD <- data_full_cleaned%>%
mutate(res.dx.final = ifelse(dx.event == "Epilepsy", "Epileptic", "Not epileptic"),
res.dx.initial = ifelse(type.epi.initial != "indetermine" & !is.na(type.epi.initial), "Epileptic", "Not epileptic"))%>%
filter(!is.na(res.dx.initial) & !is.na(res.dx.final))%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
dplyr::select(res.dx.initial, res.dx.final)
sum(is.na(data_MD$res.dx.final))
distinct(data, dx.initial)
data_MD <- data_full_cleaned%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
select(dx_ini_paste, dx_fin_paste)
View(data_MD)
distinct(data, type.epi.final)
distinct(data, type.epi.initial)
data_MD <- data_full_cleaned%>%
mutate(type.epi.initial = case_when(type.epi.initial == "cryptogenique" ~ "non lesionnelle",
type.epi.initial == "focale symptomatique" ~ "lesionnelle",
TRUE ~ type.epi.initial))%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
select(dx_ini_paste, dx_fin_paste)
data_MD$dx_ini_paste[360] == data_MD$dx_fin_paste[360]
data_MD$dx_ini_paste[360]
View(data_MD)
data_MD$dx_ini_paste[8] == data_MD$dx_fin_paste[8]
colnames(data_RF)
data_MD <- data_full_cleaned%>%
mutate(type.epi.initial = case_when(type.epi.initial == "cryptogenique" ~ "non lesionnelle",
type.epi.initial == "focale symptomatique" ~ "lesionnelle",
TRUE ~ type.epi.initial))%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")
distinct(data_MD, les.epi)
distinct(data_MD, status.neuro)
distinct(data_MD, veille.sommeil)
data_MD <- data_full_cleaned%>%
mutate(type.epi.initial = case_when(type.epi.initial == "cryptogenique" ~ "non lesionnelle",
type.epi.initial == "focale symptomatique" ~ "lesionnelle",
TRUE ~ type.epi.initial))%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(les.epi != "aucun")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
filter(veille.sommeil != "non documente")%>%
select(dx_ini_paste, dx_fin_paste)
# Predictive ability of an MD in the ER
data_MD <- data_full_cleaned%>%
mutate(type.epi.initial = case_when(type.epi.initial == "cryptogenique" ~ "non lesionnelle",
type.epi.initial == "focale symptomatique" ~ "lesionnelle",
TRUE ~ type.epi.initial))%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(les.epi != "aucun")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
filter(veille.sommeil != "non documente")%>%
select(dx_ini_paste, dx_fin_paste)
# confusion matrix and accuracy
conf_mat_MD <- table(data_MD$dx_ini_paste, data_MD$dx_fin_paste)
acc_MD <- round(mean(data_MD$dx_ini_paste == data_MD$dx_fin_paste),4)*100
acc_MD
N_first_RF_model <- nrow(data_RF)
N_first_RF_model
set.seed(2020)
# Preparation of the data
data_RF_outcome_single_tree(data_full_cleaned)
# Random forest model
# Definition of the model
RF_model <- randomForest(res.dx.final ~ ., data = data_RF_train,
ntree = 2000)
# Estimation of the mean decrease gini
gini <- importance(RF_model)
gini <- data.frame(rownames(gini), gini)
gini$MeanDecreaseGini <- round(gini$MeanDecreaseGini,2)
gini <- arrange(gini,desc( MeanDecreaseGini))
# Prediction, confusion matrix and accuracy
prediction <- predict(RF_model, newdata = data_RF_test, type = "class")
conf_mat <- table(prediction, labels_final_test_RF)
acc <- round(mean(labels_final_test_RF == prediction),4)*100
# ROC curve
# Calculate the probability of new observations belonging to each class
# prediction_for_roc_curve will be a matrix with dimensions data_set_size x number_of_classes
prediction_for_roc_curve <- predict(RF_model,data_RF_test,type="prob")
# Use pretty colours:
pretty_colours <- c("#F8766D","#00BA38")
# Specify the different classes
classes <- levels(data_RF$res.dx.final)
# For each class
save_auc <- as.numeric()
for (i in 1:2){
# Define which observations belong to class[i]
true_values <- ifelse(labels_final_test_RF==classes[i],1,0)
# Assess the performance of classifier for class[i]
pred <- prediction(prediction_for_roc_curve[,i],true_values)
perf <- performance(pred, "tpr", "fpr")
if (i==1)
{
plot(perf,main="ROC Curve",col=pretty_colours[i])
}
else
{
plot(perf,main="ROC Curve",col=pretty_colours[i],add=TRUE)
}
# Calculate the AUC and print it to screen
auc.perf <- performance(pred, measure = "auc")
save_auc[i] <- auc.perf@y.values
}
legend(x = 0.8, y= 0.8, legend = classes, fill = pretty_colours, col = pretty_colours)
save_auc <- do.call(rbind, save_auc)
res_auc <- data.frame(classes, save_auc)
# Predictive ability of an MD in the ER
data_MD <- data_full_cleaned%>%
mutate(type.epi.initial = case_when(type.epi.initial == "cryptogenique" ~ "non lesionnelle",
type.epi.initial == "focale symptomatique" ~ "lesionnelle",
TRUE ~ type.epi.initial))%>%
mutate(dx_ini_paste = paste(dx.initial, type.epi.initial),
dx_fin_paste = paste(dx.final, type.epi.final))%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(les.epi != "aucun")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
filter(veille.sommeil != "non documente")%>%
select(dx_ini_paste, dx_fin_paste)
# Data importation
data_RF_outcome_single_tree_LT(data_full_cleaned)
# prediction on all variable except LT EEG
data_RF_wo_LT <- data_RF%>%
select(-lt_eeg)
data_RF_train_wo_LT <- data_RF_train%>%
select(-lt_eeg)
data_RF_test_wo_LT <- data_RF_test%>%
select(-lt_eeg)
# Model without the LT EEG
model_wo_LT <- randomForest(res.dx.final ~ ., data = data_RF_train_wo_LT, ntree = 2000)
prediction_wo_LT <- predict(model_wo_LT, newdata = data_RF_test_wo_LT, type = "class")
conf_mat_wo_LT <- table(prediction_wo_LT, labels_final_test_RF)
acc_wo_lt <- round(mean(prediction_wo_LT == labels_final_test_RF),4)*100
acc_wo_lt
gini_wo_LT <- importance(model_wo_LT)
gini_wo_LT <- data.frame(rownames(gini_wo_LT), gini_wo_LT)
gini_wo_LT$MeanDecreaseGini <- round(gini_wo_LT$MeanDecreaseGini,2)
gini_wo_LT <- arrange(gini_wo_LT,desc(MeanDecreaseGini))
# Model with the LT EEG
model_w_LT <- randomForest(res.dx.final ~ ., data = data_RF_train, ntree = 2000)
prediction_w_LT <- predict(model_w_LT, newdata = data_RF_test, type = "class")
conf_mat_w_LT <- table(prediction_w_LT, labels_final_test_RF)
acc_w_lt <- round(mean(prediction_w_LT == labels_final_test_RF),4)*100
acc_w_lt
gini_w_LT <- importance(model_w_LT)
gini_w_LT <- data.frame(rownames(gini_w_LT), gini_w_LT)
gini_w_LT$MeanDecreaseGini <- round(gini_w_LT$MeanDecreaseGini,2)
gini_w_LT <- arrange(gini_w_LT,desc(MeanDecreaseGini))
gini_wo_LT
gini_w_LT
data_tree_exams <- data_full_cleaned%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(res.lt.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(les.epi != "douteux")%>%
mutate(dx.dicho = ifelse(dx.event != "Epilepsy" | is.na(dx.event), "non-epileptic", "epileptic"),
les.epi = ifelse(les.epi == "lesion epileptogene", "epileptogenic lesion", "no epileptogenic lesion"),
EEG.result_resume = ifelse(is.na(EEG.result_resume) | EEG.result_resume == "slow", "no spikes", "spikes"),
EEG.lt.result_resume = ifelse(is.na(EEG.lt.result_resume) | EEG.lt.result_resume == "slow", "no spikes", "spikes"))%>%
select(code.pat, dx.dicho, les.epi, EEG.result_resume, EEG.lt.result_resume, pointes.1st.EEG, pointes.lt.EEG, dx.event)
data_tree_exams%>%
group_by(EEG.lt.result_resume, EEG.result_resume, les.epi,dx.dicho)%>%
summarise(N = n())%>%
filter(les.epi == "no epileptogenic lesion" & EEG.result_resume == "no spikes" & EEG.lt.result_resume == "no spikes")
data%>%filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(EEG.result_resume == "slow" | is.na(EEG.result_resume))%>%
filter(res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(EEG.lt.result_resume == "slow" | is.na(EEG.lt.result_resume))%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(les.epi != "lesion epileptogene")%>%
select(pointes.1st.EEG, pointes.lt.EEG, res.IRM, les.epi)%>%
filter(les.epi == "douteux")
temp <- data_full_cleaned%>%
filter(pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" & res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" & res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(les.epi == "normal" | les.epi == "lesion non epileptogene")%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")
temp
data%>%filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(EEG.result_resume == "slow" | is.na(EEG.result_resume))%>%
filter(res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(EEG.lt.result_resume == "slow" | is.na(EEG.lt.result_resume))%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(les.epi != "lesion epileptogene")%>%
select(pointes.1st.EEG, pointes.lt.EEG, res.IRM, les.epi)%>%
filter(les.epi == "douteux")
data%>%filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(EEG.result_resume == "slow" | is.na(EEG.result_resume))%>%
filter(res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(EEG.lt.result_resume == "slow" | is.na(EEG.lt.result_resume))%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(les.epi != "lesion epileptogene")%>%
select(pointes.1st.EEG, pointes.lt.EEG, res.IRM, les.epi)%>%
filter(les.epi == "douteux")
data_full_cleaned%>%
filter(pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" & res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
filter(pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" & res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(les.epi == "normal" | les.epi == "lesion non epileptogene")%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")
