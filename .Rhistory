dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
lt_eeg = ifelse(lt_eeg == "focale" | lt_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
labels_final_train_RF <<- labels_final[train_index]
labels_final_test_RF <<- labels_final[-train_index]
labels_initial_train_RF <<- temp_labels_final[train_index,ncol(temp_labels_final)]
labels_initial_test_RF <<- temp_labels_final[-train_index,ncol(temp_labels_final)]
labels_initial_global <<- temp$res.dx.initial
}
library(readxl)
data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
group_by(dx.epi, type.epi.final, rec.dicho)%>%
summarise(N = n())%>%
spread(rec.dicho, N)%>%
mutate(tot = relapse + `sz free`)
144+37+11
data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.event, dx.epi, type.epi.final)
View(data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.event, dx.epi, type.epi.final)
)
View(data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)
)
colnames(data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)
)
data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)%>%
rename(code_patient = code.pat,
date_premiere_consult_urg = date.1st.cs.su,
date_vraie_premiere_crise = date.1st.1st.sz,
date_premier_EEG = date.1st.EEG,
diagnostic_1 = dx.epi,
diagnostic_2 = type.epi.final)
View(data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)%>%
rename(code_patient = code.pat,
date_premiere_consult_urg = date.1st.cs.su,
date_vraie_premiere_crise = date.1st.1st.sz,
date_premier_EEG = date.1st.EEG,
diagnostic_1 = dx.epi,
diagnostic_2 = type.epi.final))
data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)%>%
rename(code_patient = code.pat,
date_premiere_consult_urg = date.1st.cs.su,
date_vraie_premiere_crise = date.1st.1st.sz,
date_premier_EEG = date.1st.EEG,
diagnostic_1 = dx.epi,
diagnostic_2 = type.epi.final)%>%
mutate(motif_consultation = NA,
si_crise_specification = NA)
View(data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)%>%
rename(code_patient = code.pat,
date_premiere_consult_urg = date.1st.cs.su,
date_vraie_premiere_crise = date.1st.1st.sz,
date_premier_EEG = date.1st.EEG,
diagnostic_1 = dx.epi,
diagnostic_2 = type.epi.final)%>%
mutate(motif_consultation = NA,
si_crise_specification = NA))
to_export <- data_full_cleaned%>%
filter(dx.event == "Epilepsy")%>%
mutate(rec.dicho = ifelse(n.tot.recidives > 0 | is.na(n.tot.recidives), "relapse", "sz free"))%>%
filter(rec.dicho == "relapse")%>%
select(code.pat, date.1st.cs.su, date.1st.1st.sz, date.1st.EEG, date.CT, date.IRM, dx.epi, type.epi.final)%>%
rename(code_patient = code.pat,
date_premiere_consult_urg = date.1st.cs.su,
date_vraie_premiere_crise = date.1st.1st.sz,
date_premier_EEG = date.1st.EEG,
diagnostic_1 = dx.epi,
diagnostic_2 = type.epi.final)%>%
mutate(motif_consultation = NA,
si_crise_specification = NA)
library(writexl)
write_xlsx(to_export, "check_relapses_Pia.xlsx")
data_to_add_name <- read_excel("check_relapses_Pia_to_name.xlsx")
head(data_to_add_name)
dim(data_to_add_name)
add_names <- function(data){
library(readxl)
name_code_pat <- read_excel("D:/name_code_pat_open.xlsx")
library(dplyr)
data_names <- data%>%
left_join(name_code_pat, by = "code.pat")
check <- sum(is.na(data_names$nom))
if (check == 0) {
print("Data check is ok")
} else if (check > 0){
print("Warning, the importation failed, check the code.pat column")
}
return(data_names)
}
remove_names <- function(data) {
data$nom <- NULL
data$prenom <- NULL
data$date.naissance <- NULL
data_anonymized <<- data
}
data_w_names <- add_names(data_to_add_name)
data_to_add_name <- data_to_add_name%>%rename(code.pat = code_patient)
data_w_names <- add_names(data_to_add_name)
View(data_w_names)
write_xlsx(data_w_names, "data_Pia_with_names.xlsx")
# Libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(writexl)
library(emmeans)
library(tidyr)
library(lubridate)
library(car)
library(knitr)
library(randomForest)
library(ROCR)
library(NPL) # from https://github.com/EricMenetre/NPL -> Follow instruction on the README regarding installation
# functions
## Function to calculate percentages
pct.fun <- function(sub_sample, full_sample) {
pct <- round((sub_sample * 100)/full_sample,2)
return(paste(pct,"%", sep = ""))
}
pct.fun_n <- function(sub_sample, full_sample) {
pct <- round((sub_sample * 100)/full_sample,2)
return(pct)
}
# Function to create an output to report results from an lm model in the text
report_mainef_lm <- function(model){
anova_table <- anova(model)
effects <- paste("F(", anova_table$Df,") = ", round(anova_table$`F value`,2), " p = ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p == 0.000, "<0.001", output$p)
output <-output[1:(nrow(output)-1),]
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
# Function to create a text output for a chi2 model
report_chi <- function(chi_model){
if(chi_model$p.value < 0.001){
return(paste("X2 = ",round(chi_model$statistic,2), "; p<0.001", sep = ""))
} else {
return(paste( "X2 = ",round(chi_model$statistic,2), "; p = ", round(chi_model$p.value,3), sep = ""))
}
}
# Function to create a text output for a emmeans model
report_emmeans <- function(mod_emmeans){
post_hoc <- mod_emmeans
if(colnames(post_hoc)[5] == "t.ratio"){
output <- data.frame(post_hoc$contrast)
output$report <- paste("t(", post_hoc$df,") = ", round(post_hoc$t.ratio,2), "; p ", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ",round(post_hoc$p.value,3)))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else if(colnames(post_hoc[5]) == "z.ratio"){
output <- data.frame(post_hoc$contrast)
output$report <- paste("z = ", round(post_hoc$z.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ", round(post_hoc$p.value,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else{
print("Unknown format, only results from z and t distributions are available")
}
}
# Function to convert numbers to words --> 1 -> one
number_to_word <- function(number){
if(number == 0){
return("zero")
} else if(number == 1){
return("one")
}else if(number == 2){
return("two")
} else if(number == 3){
return("three")
} else if(number == 4){
return("four")
} else if(number == 5){
return("five")
} else if(number == 6){
return("six")
} else if(number == 7){
return("seven")
} else if(number == 8){
return("eight")
} else if(number == 9){
return("nine")
} else if(number == 10){
return("ten")
} else if(number > 10 | number < 0){
return(number)
}
}
# Function to create a text output for a glm model
report_glm <- function(glm_model){
sum_glm <- summary(glm_model)
sum_glm <- sum_glm$coefficients
names_eff <- rownames(sum_glm)
output <- data.frame(names_eff)
output$report <- paste("Z = ", round(sum_glm[,3],2), "; p ", ifelse(round(sum_glm[,4],3) < 0.001, "<0.001", paste("= ", round(sum_glm[,4],3), sep = "")), sep = "")
output <- output[-1,]
return(output)
}
# Function to prepare the data to be entered in the first Random Forest model
data_RF_outcome_single_tree <- function(data){
library(dplyr)
temp <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre, atcd.famille, std_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp <- temp%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
temp <- as.data.frame(temp)
for (i in 1:ncol(temp)){
temp[,i] <- factor(temp[,i])
}
data_RF <<- as.data.frame(temp)
# Division in training and test dataframes
train_index <- sample(nrow(temp), nrow(temp)*0.75)
data_RF_train <<- temp[train_index,]
data_RF_test <- temp[-train_index,]
data_RF_test <<- data_RF_test[,1:ncol(data_RF_test)-1]
labels_final <- temp[,ncol(temp)]
temp_labels_final <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,  atcd.famille, std_eeg, les.epi, status.neuro,  veille.sommeil, res.dx.final)
labels_final_train_RF <<- labels_final[train_index]
labels_final_test_RF <<- labels_final[-train_index]
labels_initial_train_RF <<- temp_labels_final[train_index,ncol(temp_labels_final)]
labels_initial_test_RF <<- temp_labels_final[-train_index,ncol(temp_labels_final)]
labels_initial_global <<- temp$res.dx.initial
}
# Function to prepare the data to be entered in the second and third Random Forest models
data_RF_outcome_single_tree_LT <- function(data){
library(dplyr)
temp <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(res.lt.EEG != "aucun")%>%
filter(res.lt.EEG != "aucun mais propose" & res.lt.EEG != "aucun mais  propose")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(lt_eeg = ifelse(res.lt.EEG == "normal", "normal", EEG.lt.result_resume),
lt_eeg = case_when(pointes.lt.EEG == "focale" ~ "focale",
pointes.lt.EEG == "diffuse"~ "diffuse",
pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" ~ lt_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,  atcd.famille, std_eeg, lt_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp <- temp%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
lt_eeg = ifelse(lt_eeg == "focale" | lt_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
temp <- as.data.frame(temp)
for (i in 1:ncol(temp)){
temp[,i] <- factor(temp[,i])
}
data_RF <<- as.data.frame(temp)
# Division in training and test dataframes
train_index <- sample(nrow(temp), nrow(temp)*0.75)
data_RF_train <<- temp[train_index,]
data_RF_test <- temp[-train_index,]
data_RF_test <<- data_RF_test[,1:ncol(data_RF_test)-1]
labels_final <- temp[,ncol(temp)]
temp_labels_final <- data%>%
filter(res.1st.EEG != "aucun" )%>%
filter(res.1st.EEG != "aucun mais propose" & res.1st.EEG != "aucun mais  propose")%>%
filter(les.epi != "aucun" & res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(!is.na(dx.event),
dx.event != "Unknown")%>%
filter(type.epi.final == "lesionnelle" | type.epi.final == "non lesionnelle" | type.epi.final == "generalisee idiopathique" | is.na(type.epi.final))%>%
filter(veille.sommeil != "non documente")%>%
filter(res.lt.EEG != "aucun")%>%
filter(res.lt.EEG != "aucun mais propose" & res.lt.EEG != "aucun mais  propose")%>%
filter(status.neuro != "aucun" &  status.neuro != "aucun mais propose" & status.neuro != "non documente")%>%
mutate(std_eeg = ifelse(res.1st.EEG == "normal", "normal", EEG.result_resume),
std_eeg = case_when(pointes.1st.EEG == "focale" ~ "focale",
pointes.1st.EEG == "diffuse"~ "diffuse",
pointes.1st.EEG != "focale" & pointes.1st.EEG != "diffuse" ~ std_eeg))%>%
mutate(lt_eeg = ifelse(res.lt.EEG == "normal", "normal", EEG.lt.result_resume),
lt_eeg = case_when(pointes.lt.EEG == "focale" ~ "focale",
pointes.lt.EEG == "diffuse"~ "diffuse",
pointes.lt.EEG != "focale" & pointes.lt.EEG != "diffuse" ~ lt_eeg))%>%
mutate(res.dx.final = dx.event)%>%
mutate(res.dx.final = ifelse(res.dx.final == "Epilepsy", "epilepsy", "non-epileptic"))%>%
mutate(age = case_when(age >= 16 & age <= 25 ~ "16_25",
age > 25 & age <= 35 ~ "26_35",
age > 35 & age <= 45 ~ "36_45",
age > 45 & age <= 55 ~ "46_55",
age > 55 & age <= 65 ~ "56_65",
age > 65 & age <= 75 ~ "66_75",
age > 75 & age <= 85 ~ "76_85",
age > 85 ~ "85_plus"))%>%
select(age, genre,atcd.famille, std_eeg, lt_eeg, les.epi, status.neuro, veille.sommeil, res.dx.final)
temp_labels_final <- temp_labels_final%>%
dplyr::mutate(std_eeg = ifelse(std_eeg == "focale" | std_eeg == "diffuse", "Spikes", "No spikes"),
lt_eeg = ifelse(lt_eeg == "focale" | lt_eeg == "diffuse", "Spikes", "No spikes"),
atcd.famille = ifelse(atcd.famille == "epilepsie", "Epilepsy", "other or none"),
les.epi = ifelse(les.epi == "lesion epileptogene", "Epileptogenic lesion", "No lesion or probably not epileptogenic"),
age = case_when(age == "16_25" | age == "26_35" | age == "36_45" | age == "46_55" ~ "<55",
age == "56_65" | age == "66_75" | age == "76_85" | age == "85_plus" ~ ">55"),
status.neuro = ifelse(status.neuro == "anormal", "Abnormal", "Normal or none"),
res.dx.final = case_when(res.dx.final == "epilepsy" ~ "Epileptic",
res.dx.final == "non-epileptic" ~ "Non epileptic"))
labels_final_train_RF <<- labels_final[train_index]
labels_final_test_RF <<- labels_final[-train_index]
labels_initial_train_RF <<- temp_labels_final[train_index,ncol(temp_labels_final)]
labels_initial_test_RF <<- temp_labels_final[-train_index,ncol(temp_labels_final)]
labels_initial_global <<- temp$res.dx.initial
}
library(readxl)
data_full_cleaned$date.1st.EEG <- as_date(data_full_cleaned$date.1st.EEG)
data_full_cleaned$date.1st.1st.sz <- as_date(data_full_cleaned$date.1st.1st.sz)
data_full_cleaned$date.2nd.1st.sz <- as_date(data_full_cleaned$date.2nd.1st.sz)
data_full_cleaned$date.dern.1st.sz <- as_date(data_full_cleaned$date.dern.1st.sz)
data_full_cleaned$date.lt.EEG <- as_date(data_full_cleaned$date.lt.EEG)
data_full_cleaned$date.1st.1st.sz <- as_date(data_full_cleaned$date.1st.1st.sz)
data_full_cleaned$date.2nd.1st.sz <- as_date(data_full_cleaned$date.2nd.1st.sz)
data_full_cleaned$date.dern.1st.sz <- as_date(data_full_cleaned$date.dern.1st.sz)
data_full_cleaned$date.IRM <- as_date(data_full_cleaned$date.IRM)
##################################################################
##                       DATA IMPORTATION                       ##
##################################################################
library(readxl)
data_full_cleaned <- read_xlsx("data_full_cleaned.xlsx")
data_full_cleaned$date.1st.EEG <- as_date(data_full_cleaned$date.1st.EEG)
data_full_cleaned$date.1st.cs.su <- as_date(data_full_cleaned$date.1st.cs.su)
data_full_cleaned$date.1st.1st.sz <- as_date(data_full_cleaned$date.1st.1st.sz)
data_full_cleaned$date.2nd.1st.sz <- as_date(data_full_cleaned$date.2nd.1st.sz)
data_full_cleaned$date.dern.1st.sz <- as_date(data_full_cleaned$date.dern.1st.sz)
data_full_cleaned$date.lt.EEG <- as_date(data_full_cleaned$date.lt.EEG)
data_full_cleaned$date.1st.1st.sz <- as_date(data_full_cleaned$date.1st.1st.sz)
data_full_cleaned$date.2nd.1st.sz <- as_date(data_full_cleaned$date.2nd.1st.sz)
data_full_cleaned$date.dern.1st.sz <- as_date(data_full_cleaned$date.dern.1st.sz)
data_full_cleaned$date.IRM <- as_date(data_full_cleaned$date.IRM)
data_tree_exams <- data_full_cleaned%>%
filter(res.IRM != "aucun" & res.IRM != "aucun mais propose")%>%
filter(res.1st.EEG != "aucun" & res.1st.EEG != "aucun mais propose")%>%
#filter(res.lt.EEG != "aucun" & res.lt.EEG != "aucun mais propose")%>%
filter(les.epi != "douteux")%>%
mutate(dx.dicho = ifelse(dx.event != "Epilepsy" | is.na(dx.event), "non-epileptic", "epileptic"),
les.epi = ifelse(les.epi == "lesion epileptogene", "epileptogenic lesion", "no epileptogenic lesion"),
EEG.result_resume = ifelse(is.na(EEG.result_resume) | EEG.result_resume == "slow", "no spikes", "spikes"),
EEG.lt.result_resume = ifelse(is.na(EEG.lt.result_resume) | EEG.lt.result_resume == "slow", "no spikes", "spikes"))%>%
mutate(EEG_LT_y_n <- ifelse(res.lt.EEG == "aucun" | res.lt.EEG == "aucun mais propose", "no", "yes"),
to_remove = ifelse(EEG.result_resume == "no spikes" & EEG_LT_y_n == "no", "remove", "keep"))%>%
filter(to_remove == "keep")%>%
select(code.pat, dx.dicho, les.epi, EEG.result_resume, EEG.lt.result_resume, pointes.1st.EEG, pointes.lt.EEG, dx.event)
data_tree_exams%>%
group_by(EEG.result_resume, les.epi,dx.dicho)%>%
summarise(N = n())%>%
filter(les.epi == "no epileptogenic lesion" & EEG.result_resume == "spikes")
data_tree_exams%>%
group_by(EEG.result_resume, les.epi,dx.dicho)%>%
summarise(N = n())%>%
filter(les.epi == "no epileptogenic lesion" & EEG.result_resume == "spikes")
data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")
data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")
data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")%>%
select(code.pat, dx.event, dx.epi, type.epi.final, date.1st.cs.epi)
data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")
temp <- data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")
data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")%>%
select(code.pat, dx.event.x, dx.epi, type.epi.final, date.1st.cs.epi)
temp <- data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")%>%
select(code.pat, dx.event.x, dx.epi, type.epi.final, date.1st.cs.epi, date.1st.EEG)
View(temp)
temp <- data_tree_exams%>%
filter(EEG.result_resume == "spikes",
les.epi == "no epileptogenic lesion",
dx.dicho == "non-epileptic")%>%
left_join(data_full_cleaned, by = "code.pat")%>%
select(code.pat, dx.event.x, type.epi.final, date.1st.cs.epi, date.1st.EEG)%>%
filter(dx.event.x != "Acute symptomatic seizure")
distinct(data_full_cleaned, dx.epi)
